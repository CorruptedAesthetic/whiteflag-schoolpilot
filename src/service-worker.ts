/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { BackgroundSyncPlugin, Queue } from "workbox-background-sync";
import { CacheableResponsePlugin } from "workbox-cacheable-response";
import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { createHandlerBoundToURL, precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import {
  CacheFirst,
  NetworkFirst,
  StaleWhileRevalidate,
} from "workbox-strategies";
import config from "./config.json";
import { Settings } from "./utilities/Settings";
import { IDBPDatabase, openDB } from "idb";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
// Cache signals endpoint
registerRoute(
  ({ url }) =>
    url.origin === config.baseUrl &&
    url.pathname.startsWith("/v1/fennel/get_signals/"),
  new NetworkFirst({
    cacheName: "encoded-signals",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 1,
      }),
    ],
  })
);

self.addEventListener("fetch", (event) => {
  if (
    event.request.method === "POST" &&
    event.request.url ===
      `${config.baseUrl}${Settings.endpoints.whiteflag.decodeList}`
  ) {
    event.respondWith(
      fetch(event.request)
        .then((response) => {
          // If the response is valid, clone it and store it in the cache
          if (response.status === 200) {
            const responseClone = response.clone();
            caches.open("decoded-signals").then((cache) => {
              cache.put(event.request.url, responseClone);
            });
          }
          return response;
        })
        .catch(() => {
          // If the network request fails, try to serve the resource from the cache
          console.log(caches);
          console.log(event.request.url);

          return caches.match(event.request.url).then((cachedResponse) => {
            if (cachedResponse) {
              return cachedResponse;
            }
          });
        })
    );
  }
});

// Cache new signals untill back online
// https://developer.chrome.com/docs/workbox/modules/workbox-background-sync/
// const bgSyncPlugin = new BackgroundSyncPlugin("myQueueName", {
//   maxRetentionTime: 24 * 60, // Retry for max of 24 Hours (specified in minutes)
// });

// registerRoute(
//   ({ url }) => url.pathname.startsWith("/signals"),
//   new NetworkOnly({
//     plugins: [bgSyncPlugin],
//   }),
//   "POST"
// );

const queue = new Queue("postedSignalQueue");

self.addEventListener("fetch", (event) => {
  // Add in your own criteria here to return early if this
  // isn't a request that should use background sync.
  if (event.request.method !== "POST") {
    return;
  }

  const bgSyncLogic = async () => {
    try {
      const response = await fetch(event.request.clone());
      return response;
    } catch (error) {
      await queue.pushRequest({ request: event.request });
      return error as Response;
    }
  };

  event.respondWith(bgSyncLogic());
});
